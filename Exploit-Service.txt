This article describes an exploit that allows a limited user to perform arbitrary actions with SYSTEM privileges using the Windows Installer service.

In short, when installing an MSI package as a "standard user", the Windows Installer service runs some operations with SYSTEM privileges. After the package is installed, a standard user can invoke a product restore using the "/f" command-line option. This leads to some interesting operations performed by the Windows Setup service.


The msiexec /qn /fa foo.msi command restores the package. In this process, the Windows Installer service tries to set the permissions on the package files that will be reinstalled and reads and writes the contents of those files. However, a "race condition" occurs during execution when the installer closes the file as a standard user and then opens it with SYSTEM privileges to write the permissions and contents.

The exploit uses the "race condition" technique to work. First, the necessary directories are created and a "symbolic link" is created in the "\RPC Control" object namespace pointing to the target file. The commands to uninstall and install the MSI package are then executed, and a thread is started that tries to win the race and use the "setSecurity" operation to overwrite file permissions. When a file is renamed and redirected to "\RPC Control", the contents of the file and its permissions are overwritten.

The article also contains links to a fully working PoC (proof-of-concept) that demonstrates the exploit on the Windows 10 Enterprise Insider Preview. The authors of the article believe that the vulnerability is related to an incorrect impersonation operation when writing DACLs (selective access control).

Please note that using the exploit for illegal purposes may violate laws and ethical standards, so it is recommended that you use it for informational and security testing purposes only. 272,273,274 of the Criminal Code of the Russian Federation.

These are the steps that the exploit takes during its execution:

First, the exploit removes the temporary old directories used to host the redirects (junctions).
An empty directory C:\Users[USER]\foomsi is created.
An empty directory C:\Users[USER]\AppData\Local\fakemsi is created. This is the directory that will be created by the MSI package to store the "foo.txt" file.
A junction is created from C:\Users[USER]\AppData\Local\fakemsi to C:\Users[USER]\foomsi (Windows Setup does not remove it) so that the redirect can be abused later to gain privileges.
A kind of symbolic link is created in the object namespace "\RPC Control". This link will be called "foo.txt" and will point to the file we want to grab (in this case c:\windows\win.ini).
The MSI package is removed (even if it does not exist): "msiexec /qn /i foo.msi" command.
The MSI package is installed: command "msiexec /qn /i foo.msi".

A thread is started to win the conditions race, and a few milliseconds later the Windows Installer service is invoked with "msiexec /qn /fa foo.msi" to use the "setSecurity" operation and win the race.
The thread starts monitoring the existence of the file C:\Users[USER]\AppData\Local\fakemsi\foo.txt.
Once the file C:\Users[USER]\AppData\Local\fakemsi\foo.txt is renamed by the MSI installation service and no longer exists, the exploit installs a redirect (junction) from C:\Users[USER]\AppData\Local\fakemsi\ to "\RPC Control".
At this point, the MSI install service creates the C:\Users[USER]\AppData\Local\fakemsi\foo.txt file again and it redirects to "RPC Control" where the "foo.txt" file is located as a link pointing to target file. Thus, the "setSecurity" operation is exploited (as well as overwriting the contents of the file). This is the core of the condition race (and exploit) in which we try to win the race. It's a matter of milliseconds.
Below is a screenshot (from Procmon) of a successful exploit. Marked all transactions important transactions.